{"version":3,"file":"main.63e98d902263e0adebce.bundle.js","sources":["webpack:///./src/lib/FeatureCase/index.ts","webpack:///./src/lib/FeatureDefault/index.ts","webpack:///./src/lib/FeatureFlag/typescript.tsx","webpack:///./src/lib/FeatureSwitch/index.tsx","webpack:///./util.inspect (ignored)","webpack:///./.storybook/config.js","webpack:///./src sync stories\\.(js|jsx|mdx)","webpack:///./src/lib/FeatureFlag/README.md","webpack:///./src/lib/FeatureFlag/FeatureFlag.stories.jsx"],"sourcesContent":["import React from 'react';\n/**\n * FeatureCase\n */\nfunction FeatureCase(props) {\n  const { children } = props;\n  return React.Children.map(children, child => child);\n}\n\nexport default FeatureCase;\ntry {\n    // @ts-ignore\n    FeatureCase.displayName = \"FeatureCase\";\n    // @ts-ignore\n    FeatureCase.__docgenInfo = { \"description\": \"FeatureCase\", \"displayName\": \"FeatureCase\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/lib/FeatureCase/index.ts#FeatureCase\"] = { docgenInfo: FeatureCase.__docgenInfo, name: \"FeatureCase\", path: \"src/lib/FeatureCase/index.ts#FeatureCase\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import React from 'react';\n/**\n * FeatureDefault\n */\nfunction FeatureDefault(props) {\n  const { children } = props;\n  return React.Children.map(children, child => child);\n}\n\nexport default FeatureDefault;\ntry {\n    // @ts-ignore\n    FeatureDefault.displayName = \"FeatureDefault\";\n    // @ts-ignore\n    FeatureDefault.__docgenInfo = { \"description\": \"FeatureDefault\", \"displayName\": \"FeatureDefault\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/lib/FeatureDefault/index.ts#FeatureDefault\"] = { docgenInfo: FeatureDefault.__docgenInfo, name: \"FeatureDefault\", path: \"src/lib/FeatureDefault/index.ts#FeatureDefault\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\n\n/**\n * FeatureFlag Props\n */\ntype FeatureFlagProps = {\n  children?: React.ReactNode;\n  flagKey: string;\n  appFlags: object;\n}\n\n/**\n * FeatureFlag\n */\nfunction FeatureFlag({ children, flagKey, appFlags }: FeatureFlagProps) {\n    function elementMatchPluginName(element: any, name: string) {\n      return (element.type.displayName === name || element.type.name === name)\n    }\n    // isChildPluginComponent is true if the child is one of\n    // [ FeatureFlag, FeatureTrue, FeatureSwitch, FeatureFalse, FeatureDefault]\n    let isChildPluginComponent = false;\n    // isNonPluginComponent is true if the child is not a component from this plugin.\n    let isNonPluginComponent = false;\n    // childArray to render\n    const childArray: React.ReactNode[] = [];\n    React.Children.forEach(children, element => {\n      if (\n        React.isValidElement(element) && elementMatchPluginName(element, 'FeatureTrue')\n      ) {\n        if (isNonPluginComponent) {\n          // telling the developer to not use NonPlugin components under FeatureFlag.\n          // eslint-disable-next-line no-console\n          console.warn(\n            'Dont Use <FeatureTrue /> among other elements/components under <FeatureFlag /> only use it with <FeatureFalse />, No mix allowed'\n          );\n          return;\n        }\n        // if the appFlags has the flagKey, render the child\n        if (appFlags[flagKey] && appFlags[flagKey].value) {\n          childArray.push(element);\n        }\n        isChildPluginComponent = true;\n      }\n  \n      if (\n        React.isValidElement(element) && elementMatchPluginName(element, 'FeatureFalse')\n      ) {\n        if (isNonPluginComponent) {\n          // eslint-disable-next-line no-console\n          console.warn(\n            'Dont Use <FeatureFalse /> among other elements/components under <FeatureFlag /> only use it with <FeatureTrue />, No mix allowed'\n          );\n          return;\n        }\n        if (!appFlags[flagKey] || (appFlags[flagKey] && !appFlags[flagKey].value)) {\n          childArray.push(element);\n        }\n        isChildPluginComponent = true;\n      }\n      // }\n  \n      if (\n        React.isValidElement(element) && elementMatchPluginName(element, 'FeatureSwitch')\n      ) {\n        if (isNonPluginComponent) {\n          // eslint-disable-next-line no-console\n          console.warn(\n            'Dont Use <FeatureSwitch /> unless its the immediate children of <FeatureFlag />, No mix allowed'\n          );\n          return;\n        }\n        childArray.push(\n          React.cloneElement(element,{\n            flagKey,\n            appFlags\n          })\n        );\n        isChildPluginComponent = true;\n      }\n      // if the component is neither of the above components it must be NonPlugin Component,\n      // therefore, we simply render it as its under FeatureTrue\n      if (!isChildPluginComponent) {\n        isNonPluginComponent = true;\n        if (appFlags[flagKey] && appFlags[flagKey].value) {\n          childArray.push(element);\n        }\n      }\n    });\n  \n    return React.Children.map(childArray, child => child);\n  }\n  \n  export default FeatureFlag;try {\n    // @ts-ignore\n    FeatureFlag.displayName = \"FeatureFlag\";\n    // @ts-ignore\n    FeatureFlag.__docgenInfo = { \"description\": \"FeatureFlag\", \"displayName\": \"FeatureFlag\", \"props\": { \"flagKey\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"flagKey\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"appFlags\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"appFlags\", \"required\": true, \"type\": { \"name\": \"object\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/lib/FeatureFlag/typescript.tsx#FeatureFlag\"] = { docgenInfo: FeatureFlag.__docgenInfo, name: \"FeatureFlag\", path: \"src/lib/FeatureFlag/typescript.tsx#FeatureFlag\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import React from 'react';\nimport FeatureCase from '../FeatureCase';\nimport FeatureDefault from '../FeatureDefault';\n\ninterface IAppFlag {\n  value: any,\n  version: number,\n  variation: number,\n  trackEvents: boolean\n}\n\ninterface IComponentProps {\n  flagKey: string;\n  appFlags: {\n    [x: string]: IAppFlag;\n  };\n}\n\n/**\n * FeatureSwitch\n */\nconst FeatureSwitch: React.FC<IComponentProps> = (props) => {\n  const { children, flagKey, appFlags } = props;\n\n  const childArray: React.ReactNode[] = [];\n\n  let breakIt = false;\n\n  React.Children.forEach(children, element => {\n    // if the Component is FeatureCase and break is false, compare the feature flag and render the element if its true\n    if (React.isValidElement(element) && (element as any).type === FeatureCase && !breakIt) {\n      // TODO use proper type cast here once they are defined\n      const { condition, allowBreak } = (element as any).props;\n      if ((appFlags[flagKey] && appFlags[flagKey].value) === condition) {\n        childArray.push(element);\n        breakIt = allowBreak;\n      }\n    }\n    // if its Default and it is not breaked yet, render the element.\n    if (React.isValidElement(element) && (element as any).type === FeatureDefault && !breakIt) {\n      childArray.push(element);\n    }\n  });\n\n  return <React.Fragment>{childArray}</React.Fragment>;\n};\n\nexport default FeatureSwitch;\n","/* (ignored) */","import { addDecorator } from '@storybook/react';\nimport { configure, addParameters } from '@storybook/react';\nimport \"core-js/stable\";\nimport \"regenerator-runtime/runtime\";\nimport { withA11y } from '@storybook/addon-a11y';\n\n// automatically import all files ending in *.stories.js\nconfigure(require.context('../src', true, /stories\\.(js|jsx|mdx)?$/), module);\n\naddDecorator(withA11y);\n\naddParameters({\n  options: {\n    panelPosition: 'bottom',\n    name: 'Launch Darkly React Components',\n  },\n  backgrounds: [\n    {name: 'white', value: \"#fff\", default: true},\n    {name: 'grey', value: \"#f4f5f8\"}\n  ],\n  a11y: {\n    // ... axe options\n    element: '#root', // optional selector which element to inspect\n    config: {}, // axe-core configurationOptions (https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#parameters-1)\n    options: {} // axe-core optionsParameter (https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter)\n  },\n});\n","var map = {\n\t\"./lib/FeatureFlag/FeatureFlag.stories.jsx\": 977\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 966;","export default \"### FeatureFlag\\n\\nTakes `flagKey` and `appFlags` as `props`, which is an object containing list of features.\\n\\n### FeatureSwitch, FeatureCase and FeatureDefault\\n\\n`FeatureSwitch` should be a child of `FeatureFlag` and can take `FeatureCase` and `FeatureDefault` as children.\\n\\n`FeatureCase` component takes `condition` and `allowBreak`(a boolean) as props,\\n`condition` is the `case` feature, while `allowBreak` used as a `break`. The reason for name change is `case` and `break` are reserved words on JS.\"","\n  // @ts-ignore\n  var withSourceLoader = require('@storybook/source-loader/preview').withSource;\n  // @ts-ignore\n  var __SOURCE_PREFIX__ = \"/home/circleci/ld-react-components/src/lib/FeatureFlag\";\n  // @ts-ignore\n  var __STORY__ = \"import React from 'react';\\nimport FeatureFlag from './typescript.tsx';\\nimport FeatureSwitch from '../FeatureSwitch';\\nimport FeatureCase from '../FeatureCase';\\nimport FeatureDefault from '../FeatureDefault';\\nimport notes from './README.md';\\n\\nexport default {\\n  title: 'Component|Feature Flag',\\n  component: FeatureFlag,\\n  parameters: { notes }\\n};\\n\\nconst applicationKeys = {\\n  'integration-test': { value: true, version: 3 },\\n  'multivariate-test': { value: 'multivariate-test-1', version: 5 }\\n};\\n\\nexport const basicFeatureFlag = () => (\\n  <FeatureFlag flagKey=\\\"multivariate-test\\\" appFlags={applicationKeys}>\\n    <FeatureSwitch>\\n      <FeatureCase condition=\\\"multivariate-test-1\\\" allowBreak>\\n        <p>Multivariate Test 1 Rendered</p>\\n      </FeatureCase>\\n      <FeatureCase condition=\\\"multivariate-test-2\\\" allowBreak>\\n        <p>Multivariate Test 2 Rendered</p>\\n      </FeatureCase>\\n      <FeatureCase condition=\\\"multivariate-test-3\\\" allowBreak>\\n        <p>Multivariate Test 3 Rendered</p>\\n      </FeatureCase>\\n      <FeatureCase condition=\\\"multivariate-test-4\\\" allowBreak>\\n        <p>Multivariate Test 4 Rendered</p>\\n      </FeatureCase>\\n      <FeatureDefault>\\n        <p>If no conditions are met then render the default</p>\\n      </FeatureDefault>\\n    </FeatureSwitch>\\n  </FeatureFlag>\\n);\\n\";\n  // @ts-ignore\n  var __ADDS_MAP__ = {\"component-feature-flag--basic-feature-flag\":{\"startLoc\":{\"col\":32,\"line\":19},\"endLoc\":{\"col\":1,\"line\":39},\"startBody\":{\"col\":32,\"line\":19},\"endBody\":{\"col\":1,\"line\":39}}};\n  // @ts-ignore\n  var __MAIN_FILE_LOCATION__ = \"/FeatureFlag.stories.jsx\";\n  // @ts-ignore\n  var __MODULE_DEPENDENCIES__ = [];\n  // @ts-ignore\n  var __LOCAL_DEPENDENCIES__ = {};\n  // @ts-ignore\n  var __IDS_TO_FRAMEWORKS__ = {};\n\n  var addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\nimport React from 'react';\nimport FeatureFlag from './typescript.tsx';\nimport FeatureSwitch from '../FeatureSwitch';\nimport FeatureCase from '../FeatureCase';\nimport FeatureDefault from '../FeatureDefault';\nimport notes from './README.md';\n\nexport default {\n  title: 'Component|Feature Flag',\n  component: FeatureFlag,\n  parameters: {\"storySource\":{\"source\":\"import React from 'react';\\nimport FeatureFlag from './typescript.tsx';\\nimport FeatureSwitch from '../FeatureSwitch';\\nimport FeatureCase from '../FeatureCase';\\nimport FeatureDefault from '../FeatureDefault';\\nimport notes from './README.md';\\n\\nexport default {\\n  title: 'Component|Feature Flag',\\n  component: FeatureFlag,\\n  parameters: { notes }\\n};\\n\\nconst applicationKeys = {\\n  'integration-test': { value: true, version: 3 },\\n  'multivariate-test': { value: 'multivariate-test-1', version: 5 }\\n};\\n\\nexport const basicFeatureFlag = () => (\\n  <FeatureFlag flagKey=\\\"multivariate-test\\\" appFlags={applicationKeys}>\\n    <FeatureSwitch>\\n      <FeatureCase condition=\\\"multivariate-test-1\\\" allowBreak>\\n        <p>Multivariate Test 1 Rendered</p>\\n      </FeatureCase>\\n      <FeatureCase condition=\\\"multivariate-test-2\\\" allowBreak>\\n        <p>Multivariate Test 2 Rendered</p>\\n      </FeatureCase>\\n      <FeatureCase condition=\\\"multivariate-test-3\\\" allowBreak>\\n        <p>Multivariate Test 3 Rendered</p>\\n      </FeatureCase>\\n      <FeatureCase condition=\\\"multivariate-test-4\\\" allowBreak>\\n        <p>Multivariate Test 4 Rendered</p>\\n      </FeatureCase>\\n      <FeatureDefault>\\n        <p>If no conditions are met then render the default</p>\\n      </FeatureDefault>\\n    </FeatureSwitch>\\n  </FeatureFlag>\\n);\\n\",\"locationsMap\":{\"component-feature-flag--basic-feature-flag\":{\"startLoc\":{\"col\":32,\"line\":19},\"endLoc\":{\"col\":1,\"line\":39},\"startBody\":{\"col\":32,\"line\":19},\"endBody\":{\"col\":1,\"line\":39}}}}, notes }};\n\nconst applicationKeys = {\n  'integration-test': { value: true, version: 3 },\n  'multivariate-test': { value: 'multivariate-test-1', version: 5 }\n};\n\nexport const basicFeatureFlag = addSourceDecorator(() => (\n  <FeatureFlag flagKey=\"multivariate-test\" appFlags={applicationKeys}>\n    <FeatureSwitch>\n      <FeatureCase condition=\"multivariate-test-1\" allowBreak>\n        <p>Multivariate Test 1 Rendered</p>\n      </FeatureCase>\n      <FeatureCase condition=\"multivariate-test-2\" allowBreak>\n        <p>Multivariate Test 2 Rendered</p>\n      </FeatureCase>\n      <FeatureCase condition=\"multivariate-test-3\" allowBreak>\n        <p>Multivariate Test 3 Rendered</p>\n      </FeatureCase>\n      <FeatureCase condition=\"multivariate-test-4\" allowBreak>\n        <p>Multivariate Test 4 Rendered</p>\n      </FeatureCase>\n      <FeatureDefault>\n        <p>If no conditions are met then render the default</p>\n      </FeatureDefault>\n    </FeatureSwitch>\n  </FeatureFlag>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\n  "],"mappings":";;;;;;;;;;;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACpBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACpBA;AAWA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtGA;AACA;AACA;AAgBA;;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;AC/CA;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAeA;AACA;AACA;AAJA;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;;ACCA;AAAA;AACA;AAiBA;;;;A","sourceRoot":""}